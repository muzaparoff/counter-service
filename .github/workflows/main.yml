name: Build, Deploy, and Run Docker Image

on:
  push:
    branches:
      - main
      - feature/*

jobs:
  build-deploy-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine New Version
        id: bump_version
        run: |
          # Check if the base tag 0.0.1 exists
          if ! git rev-parse --verify 0.0.1 >/dev/null 2>&1; then
            new_version="0.0.1"
          else
            # Find the latest patch version
            latest_patch=$(git tag -l '0.0.*' --sort=-v:refname | head -n 1)
            IFS='.' read -ra version_parts <<< "$latest_patch"
            major="${version_parts[0]}"
            minor="${version_parts[1]}"
            patch="${version_parts[2]}"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "::set-output name=new_version::$new_version"
        shell: bash

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          new_version=${{ steps.bump_version.outputs.new_version }}
          docker build -t muzaparoff/counter-service:$new_version .
        env:
          DOCKER_BUILDKIT: 1

      - name: Push Docker image to Docker Hub
        run: |
          new_version=${{ steps.bump_version.outputs.new_version }}
          docker push muzaparoff/counter-service:$new_version

      - name: Create Git Tag
        env:
          GIT_SSH_KEY: ${{ secrets.GIT_SSH_KEY }}
          USER_EMAIL: ${{ secrets.USER_EMAIL }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          new_version=${{ steps.bump_version.outputs.new_version }}
          mkdir -p ~/.ssh
          echo "$GIT_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --local user.email github-actions[bot]@users.noreply.github.com
          git config --local user.name github-actions[bot]
          git tag $new_version
          git push origin $new_version

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Docker Container
        run: |
          new_version=${{ steps.bump_version.outputs.new_version }}
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "docker pull muzaparoff/counter-service:$new_version"
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "docker run -d --restart=always -p 80:80 muzaparoff/counter-service:$new_version"
